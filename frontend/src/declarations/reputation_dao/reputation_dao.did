type UserDecayInfo = 
 record {
   lastActivityTime: nat;
   lastDecayTime: nat;
   registrationTime: nat;
   totalDecayed: nat;
 };
type TransactionType = 
 variant {
   Award;
   Decay;
   Revoke;
 };
type Transaction = 
 record {
   amount: nat;
   from: principal;
   id: nat;
   reason: opt text;
   timestamp: nat;
   to: principal;
   transactionType: TransactionType;
 };
type TopUp = 
 record {
   amount: nat;
   from: principal;
   id: nat;
   timestamp: nat;
 };
type ReputationChild = 
 service {
   acceptOwnership: () -> (text);
   addTrustedAwarder: (p: principal, name: text) -> (text);
   awardRep: (to: principal, amount: nat, reason: opt text) -> (text);
   awarderStats: (awardee: principal) -> (vec AwarderBreakdown) query;
   blacklist: (user: principal, on: bool) -> (text);
   configureDecay: (decayRate: nat, decayInterval: nat, minThreshold: 
    nat, gracePeriod: nat, enabled: bool) -> (text);
   cycles_balance: () -> (nat) query;
   emitEvent: (kind: text, payload: blob) -> (text);
   findTransactionsByReason: (substr: text, limit: nat) ->
    (vec Transaction) query;
   getBalance: (p: principal) -> (nat) query;
   getBalanceWithDetails: (p: principal) ->
    (record {
       currentBalance: nat;
       decayInfo: opt UserDecayInfo;
       pendingDecay: nat;
       rawBalance: nat;
     }) query;
   getDecayConfig: () -> (DecayConfig) query;
   getDecayStatistics: () ->
    (record {
       configEnabled: bool;
       lastGlobalDecayProcess: nat;
       totalDecayedPoints: nat;
     }) query;
   getTopUpCount: () -> (nat) query;
   getTopUpsPaged: (offset: nat, limit: nat) -> (vec TopUp) query;
   getTransactionById: (id: nat) -> (opt Transaction) query;
   getTransactionCount: () -> (nat) query;
   getTransactionHistory: () -> (vec Transaction) query;
   getTransactionsByUser: (user: principal) -> (vec Transaction) query;
   getTransactionsPaged: (offset: nat, limit: nat) -> (vec Transaction) query;
   getTrustedAwarders: () -> (vec Awarder) query;
   getUserDecayInfo: (p: principal) -> (opt UserDecayInfo) query;
   health: () ->
    (record {
       cycles: nat;
       decayConfigHash: nat;
       paused: bool;
       topUpCount: nat;
       txCount: nat;
       users: nat;
     }) query;
   leaderboard: (top: nat, offset: nat) ->
    (vec record {
           principal;
           nat;
         }) query;
   multiAward: (pairs: vec record {
                             principal;
                             nat;
                             opt text;
                           }, atomic: bool) -> (text);
   myStats: (user: principal) ->
    (record {
       balance: nat;
       lastActivity: nat;
       lifetimeAwarded: nat;
       lifetimeRevoked: nat;
       totalDecayed: nat;
     }) query;
   nominateOwner: (candidate: principal) -> (text);
   orgPulse: (since: nat) ->
    (record {
       awards: nat;
       decays: nat;
       revokes: nat;
     }) query;
   pause: (p: bool) -> (text);
   previewDecayAmount: (p: principal) -> (nat) query;
   processBatchDecay: () -> (text);
   removeTrustedAwarder: (p: principal) -> (text);
   resetUser: (user: principal, reason: opt text) -> (text);
   revokeRep: (from: principal, amount: nat, reason: opt text) -> (text);
   setDailyMintLimit: (limit: nat) -> (text);
   setMinCyclesAlert: (threshold: nat) -> (text);
   setParent: (canisterId: principal) -> (text);
   setPerAwarderDailyLimit: (awardee: principal, limit: nat) -> (text);
   snapshotHash: () -> (nat) query;
   topUp: () -> (nat);
   transferOwnership: (newOwner: principal) -> (text);
   triggerManualDecay: () -> (text);
   version: () -> (text) query;
   wallet_receive: () -> (nat);
   withdrawCycles: (to: principal, amount: nat) -> (text);
 };
type DecayConfig = 
 record {
   decayInterval: nat;
   decayRate: nat;
   enabled: bool;
   gracePeriod: nat;
   minThreshold: nat;
 };
type AwarderBreakdown = 
 record {
   awarder: principal;
   lastAward: nat;
   total: nat;
 };
type Awarder = 
 record {
   id: principal;
   name: text;
 };
service : (initOwner: principal) -> ReputationChild
